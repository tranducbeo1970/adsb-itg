/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.attech.adsb.playbackserver;

import com.attech.adsb.playbackserver.config.BroadCasterConfig;
import com.attech.adsb.playbackserver.gui.config.ConfigDialog;
import com.attech.adsb.playbackserver.config.Configuration;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.FilenameFilter;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;

/**
 *
 * @author andh
 */
public class Main extends javax.swing.JFrame {
private static final Logger logger = Logger.getLogger(Main.class);
    private Configuration configuration;
    private String root = "data";
    private FilesTableModel tableModel;
    private PlaybackTask task;

    /**
     * Creates new form Main
     */
    public Main(Configuration configuration) {
        initComponents();
        this.configuration = configuration;
        this.tableModel = new FilesTableModel(tblPlayList);
        // this.tblPlayList.setModel(tableModel);
        // this.tableModel.initColumnWidth(tblPlayList);
        
        load();
    }

    private void load() {
        this.tableModel.clear();
        List<PlaybackFile> files = loadFile(root);
        if (files == null ) {
            return;
        }        
        
        for (PlaybackFile playbackFile : files) {
            this.tableModel.add(playbackFile);
        }
    }

    private List<PlaybackFile> loadFile(String path) {
        File file = new File(path);
        File[] files = file.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".rcd");
            }
        });
        
        if (files == null || files.length == 0) {
            return null;
        }
        
        List<PlaybackFile> playbackFiles = new ArrayList<>();
        for (File f : files) {
            playbackFiles.add(new PlaybackFile(f, this.configuration.getReadMode()));
        }
        
        return playbackFiles;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlayList = new javax.swing.JTable();
        btnPlay = new javax.swing.JToggleButton();
        btnConfig = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ADS-B Playback Server");
        setResizable(false);

        tblPlayList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPlayList);

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnConfig.setText("Config");
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        btnHelp.setText("?");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(btnPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPlay, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                    .addComponent(btnHelp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        ConfigDialog dialog = new ConfigDialog(this, true, configuration);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnConfigActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        try {
            if (btnPlay.isSelected()) {
                play();
                btnPlay.setText("Stop");
            } else {
                stop();
                btnPlay.setText("Play");
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            
        }

    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        // TODO add your handling code here:
        Help help = new Help(this, true);
        help.setVisible(true);
    }//GEN-LAST:event_btnHelpActionPerformed

    private void play() throws SocketException, UnknownHostException {
        List<Broadcaster> broadcasters = new ArrayList<>();
        for (BroadCasterConfig config : this.configuration.getBroadCasterConfigs()) {
            Broadcaster broadcaster = new Broadcaster(config.getIp(), config.getPort());
            broadcaster.initialize();
            broadcasters.add(broadcaster);
        }
        
        task = new PlaybackTask(
                this.tableModel.getPlaybackFiles(),
                broadcasters,
                this.tableModel.getSelected(),
                this.configuration.getInterval(),
                this.configuration.getReadMode());
        task.addPropertyChangeListener(this::backgroundPropertyChange);
        task.addStateChangeLister(this::backgroundStateChange);
        task.execute();
    }
    
    private void stop() {
        if (task == null || task.isDone() || task.isCancelled()) {
            return;
        }
        
        task.cancel(true);
    }
    
    private void backgroundStateChange(int index, String state) {
        this.tableModel.setValueAt(state, index, 2);
    }
    
    private void backgroundPropertyChange(PropertyChangeEvent evt) {
        System.out.println(evt.getPropertyName() + ":" + evt.getNewValue());
        String key = evt.getPropertyName();
        
        if ("state".equalsIgnoreCase(key)) {
            String value = evt.getNewValue().toString();
            if (value.equalsIgnoreCase("started")) {
                logger.info(value);

            } else {
                logger.info(value);
            }
        } else if ("progress".equalsIgnoreCase(key)) {
            // 
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnHelp;
    private javax.swing.JToggleButton btnPlay;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPlayList;
    // End of variables declaration//GEN-END:variables
}

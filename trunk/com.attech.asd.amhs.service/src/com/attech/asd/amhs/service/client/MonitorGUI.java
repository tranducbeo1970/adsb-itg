/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.attech.asd.amhs.service.client;

import com.attech.asd.amhs.database.dao.DBException;
import com.attech.asd.amhs.database.dao.HibernateUtil;
import com.attech.asd.amhs.database.dao.MessageAccountDao;
import com.attech.asd.amhs.database.entities.MessageAccount;
import com.attech.asd.amhs.service.MLogger;
import com.attech.asd.amhs.service.monitor.Command;
import com.attech.asd.amhs.service.monitor.CommandType;
import com.attech.asd.amhs.service.monitor.ThreadStatus;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.log4j.xml.DOMConfigurator;

/**
 *
 * @author ANDH
 */
public class MonitorGUI extends javax.swing.JFrame {

    private static MLogger logger = MLogger.getLogger(MonitorGUI.class);
    private MessageAccountDao messageAccountDao = new MessageAccountDao();
    private MessageAccountTableModel tableModel;
    private SocketClientThread clientThread;
    private ClientEventHandler clientEventHandler;

    /**
     * Creates new form MonitorGUI
     *
     * @throws com.attech.asd.amhs.database.dao.DBException
     */
    public MonitorGUI() throws DBException {
	initComponents();

	this.btnConnect.setEnabled(true);
	this.btnDisconnect.setEnabled(false);

	tableModel = new MessageAccountTableModel(tblAccount);
	// Initialize
	List<MessageAccount> messageAccountList = messageAccountDao.getAll();
	for (MessageAccount mesageAccount : messageAccountList) {
	    tableModel.add(mesageAccount);
	}

	clientEventHandler = new ClientEventHandler() {
	    @Override
	    public void updateStatus(ConnectionEventType eventType,  List<ThreadStatus> threadStatusList) {
		onStatusUpdate(eventType, threadStatusList);
	    }
	};

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtServerIP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAccount = new javax.swing.JTable();
        btnConnect1 = new javax.swing.JButton();
        btnStartAll = new javax.swing.JButton();
        btnStopAll = new javax.swing.JButton();
        btnStartSelected = new javax.swing.JButton();
        btnStopSelected = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 768));

        jLabel1.setText("Server IP:");

        txtServerIP.setText("192.168.22.149");

        jLabel2.setText("Port:");

        txtPort.setText("7749");

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        lblStatus.setText("jLabel3");

        tblAccount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblAccount);

        btnConnect1.setText("Refresh table");

        btnStartAll.setText("Start ALL");
        btnStartAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartAllActionPerformed(evt);
            }
        });

        btnStopAll.setText("Stop All");
        btnStopAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopAllActionPerformed(evt);
            }
        });

        btnStartSelected.setText("Start Selected");
        btnStartSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartSelectedActionPerformed(evt);
            }
        });

        btnStopSelected.setText("Stop Selected");
        btnStopSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopSelectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDisconnect))
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConnect1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStartAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStopAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStartSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStopSelected))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 995, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect1)
                    .addComponent(btnStartAll)
                    .addComponent(btnStopAll)
                    .addComponent(btnStartSelected)
                    .addComponent(btnStopSelected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
	try {
	    if (clientThread != null && clientThread.isRunning()) {

		JOptionPane.showMessageDialog(this, "Already connected");
		return;
	    }

	    String ip = this.txtServerIP.getText();
	    Integer port = Integer.parseInt(this.txtPort.getText());
	    clientThread = new SocketClientThread(ip, port);
	    clientThread.setClientHandler(clientEventHandler);
	    clientThread.start();
	    this.btnConnect.setEnabled(false);
	    this.btnDisconnect.setEnabled(true);
	} catch (Exception ex) {
	    logger.error(ex);
	}
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
	try {
	    clientThread.stopThread();
	    this.btnConnect.setEnabled(true);
	    this.btnDisconnect.setEnabled(false);
	} catch (Exception ex) {
	    logger.error(ex);
	}
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnStopSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopSelectedActionPerformed
        try {
	    int selectedRow = this.tblAccount.getSelectedRow();
	    if (selectedRow < 0) {
		return;
	    }
	    int id = (int) this.tableModel.getValueAt(selectedRow, 0);
	    Command command = new Command(CommandType.STOP, id);
	    this.clientThread.sendCommand(command);
	} catch (Exception ex) {
	    logger.error(ex);
	}
    }//GEN-LAST:event_btnStopSelectedActionPerformed

    private void btnStartSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartSelectedActionPerformed
       try {
	    int selectedRow = this.tblAccount.getSelectedRow();
	    if (selectedRow < 0) {
		return;
	    }
	    int id = (int) this.tableModel.getValueAt(selectedRow, 0);
	    Command command = new Command(CommandType.START, id);
	    this.clientThread.sendCommand(command);
	} catch (Exception ex) {
	    logger.error(ex);
	}
    }//GEN-LAST:event_btnStartSelectedActionPerformed

    private void btnStartAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartAllActionPerformed
        try {
	   
//	    Command command = new Command(CommandType.START, );
//	    this.clientThread.sendCommand(command);
	} catch (Exception ex) {
	    logger.error(ex);
	}
    }//GEN-LAST:event_btnStartAllActionPerformed

    private void btnStopAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStopAllActionPerformed

    private void onStatusUpdate(ConnectionEventType type,  List<ThreadStatus> param) {
	switch (type) {
	    case Connected:
		JOptionPane.showMessageDialog(this, "Connected");
		break;

	    case Disconnected:
		JOptionPane.showMessageDialog(this, "Disconnected");
		break;

	    case Update:

		
//		List<ThreadStatus> threadStatusList = (List<ThreadStatus>) param[0];
		if (param == null) {
		    break;
		}

		for (ThreadStatus status : param) {
		    logger.info("Update id:%s status:%s count:%s", status.getId(), status.getStatus(), status.getMessageCount());
		    this.tableModel.update(status);
		}
		break;
	}

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Windows".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(MonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(MonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(MonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(MonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	DOMConfigurator.configure("config/log.xml");
	HibernateUtil.buildSessionFactory("config/database.xml");

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		try {
		    new MonitorGUI().setVisible(true);
		} catch (DBException ex) {
		    logger.error(ex);
		}
	    }
	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnConnect1;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnStartAll;
    private javax.swing.JButton btnStartSelected;
    private javax.swing.JButton btnStopAll;
    private javax.swing.JButton btnStopSelected;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblAccount;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtServerIP;
    // End of variables declaration//GEN-END:variables
}

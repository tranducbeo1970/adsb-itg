/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.attech.asd.administrator.views;

import com.attech.asd.administrator.common.CustomDialog;
import com.attech.asd.administrator.common.Validator;
import com.attech.asd.database.AdapterObject;
import com.attech.asd.database.entities.Aircrafts;
import com.attech.asd.database.AircraftsDao;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.List;
import javax.swing.JOptionPane;

public class AircraftEdit extends CustomDialog {

    /**
     * Creates new form AircraftEdit
     */
    private Aircrafts aircraft;

    public AircraftEdit(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        txtRegis.setDocument(new JTextFieldLimit(10));
        txtModel.setDocument(new JTextFieldLimit(6));
    }

    private void bindData() {
        if (aircraft != null) {
            this.setTitle("Edit Aircraft");
            this.btnSave.setText("Update");
            this.txtAddress.setText(getAircraft().getIcao24Address());
            //this.txtAddress.setEditable(false);
            this.txtRegis.setText(getAircraft().getRegistrationNo());
            this.txtModel.setText(getAircraft().getModel());
            this.txtOperator.setText(getAircraft().getOperator());
            this.txtAircraftType.setText(getAircraft().getAircraftType());
        } else {
            this.setTitle("Add New Aircraft");
            this.btnSave.setText("Save");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtRegis = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtModel = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAircraftType = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtOperator = new javax.swing.JTextField();

        setTitle("Add/Edit Aircraft -  ADSB Administrator Terminal 1.0.0");
        setResizable(false);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/attech/asd/administrator/images/export.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/attech/asd/administrator/images/out_1.png"))); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(5, 2, 3, 3));

        jLabel2.setText("ICAO 24bit Address :");
        jPanel1.add(jLabel2);
        jPanel1.add(txtAddress);

        jLabel3.setText("Registration No :");
        jPanel1.add(jLabel3);
        jPanel1.add(txtRegis);

        jLabel4.setText("Model :");
        jPanel1.add(jLabel4);
        jPanel1.add(txtModel);

        jLabel5.setText("Aircraft Type :");
        jPanel1.add(jLabel5);
        jPanel1.add(txtAircraftType);

        jLabel6.setText("Operator :");
        jPanel1.add(jLabel6);
        jPanel1.add(txtOperator);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClose)
                .addContainerGap(73, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(168, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnClose))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (validateForm()) {
            AircraftsDao dao = new AircraftsDao();
            if (this.aircraft == null) {
                this.aircraft = new Aircrafts();
            }
            this.aircraft.setIcao24Address(txtAddress.getText());
            this.aircraft.setRegistrationNo(txtRegis.getText());
            this.aircraft.setModel(txtModel.getText());
            this.aircraft.setAircraftType(txtAircraftType.getText());
            this.aircraft.setOperator(txtOperator.getText());
            try {
                new AdapterObject().saveCraft(aircraft);
                JOptionPane.showMessageDialog(rootPane, "Update successfully.");
                setVisible(false);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, "Update fail");
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AircraftEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AircraftEdit dialog = new AircraftEdit(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public boolean validateForm() {
        boolean check = true;
        if (check == true) {
            if (!Validator.isEmpty(txtRegis.getText())) {
                JOptionPane.showMessageDialog(rootPane, String.format("You must fill in RegistrationNo"), "Message", JOptionPane.INFORMATION_MESSAGE);
                txtRegis.requestFocus();
                check = false;
            }
        }
        if (check == true) {
            if (!Validator.isEmpty(txtModel.getText())) {
                JOptionPane.showMessageDialog(rootPane, String.format("You must fill in Model"), "Message", JOptionPane.INFORMATION_MESSAGE);
                txtModel.requestFocus();
                check = false;
            }
        }
        if (check == true) {
            if (!Validator.isEmpty(txtAircraftType.getText())) {
                JOptionPane.showMessageDialog(rootPane, String.format("You must fill in AircraftType"), "Message", JOptionPane.INFORMATION_MESSAGE);
                txtAircraftType.requestFocus();
                check = false;
            }
        }
        if (check == true) {
            if (!Validator.isEmpty(txtOperator.getText())) {
                JOptionPane.showMessageDialog(rootPane, String.format("You must fill in Operator"), "Message", JOptionPane.INFORMATION_MESSAGE);
                txtOperator.requestFocus();
                check = false;
            }
        }
        if (check == true) {
            if (!Validator.isMaxLeng(txtRegis.getText(), 10)) {
                JOptionPane.showMessageDialog(this, "RegistrationNo isn't more than 10 digits", "Message", JOptionPane.INFORMATION_MESSAGE);
                txtRegis.requestFocus();
                check = false;
            }
        }
        if (check == true) {
            if (!Validator.isMaxLeng(txtModel.getText(), 10)) {
                JOptionPane.showMessageDialog(this, "Model isn't more than 10 digits", "Message", JOptionPane.INFORMATION_MESSAGE);
                txtModel.requestFocus();
                check = false;
            }
        }
        if (check == true) {
            if (!Validator.isChar(txtAircraftType.getText())) {
                JOptionPane.showMessageDialog(rootPane, String.format("AircraftType should  contain word, number, spaces and hyphen."), "Message", JOptionPane.INFORMATION_MESSAGE);
                txtAircraftType.requestFocus();
                check = false;
            }
        }

        if (this.aircraft == null) {
            //add new
            List<Aircrafts> tmp;
            tmp = new AircraftsDao().getByAddress(txtAddress.getText());
            if (tmp != null && tmp.size() > 0) {
                JOptionPane.showMessageDialog(this, "Icao24Address existed.");
                txtAddress.requestFocus();
                return false;
            }

            tmp = new AircraftsDao().getByRegistrationNo(txtRegis.getText());
            if (tmp != null && tmp.size() > 0) {
                JOptionPane.showMessageDialog(this, "Registration No existed.");
                txtRegis.requestFocus();
                return false;
            }
            check = true;
        } else {
            //edit
            List<Aircrafts> tmp;
            tmp = new AircraftsDao().getByAddress(txtAddress.getText());
            if (tmp != null && tmp.size() > 0) {
                for (Aircrafts craft : tmp) {
                    if (craft.getId().intValue() != aircraft.getId().intValue()) {
                        JOptionPane.showMessageDialog(this, "Icao24Address existed.");
                        txtAddress.requestFocus();
                        return false;
                    }
                }
            }

            tmp = new AircraftsDao().getByRegistrationNo(txtRegis.getText());
            if (tmp != null && tmp.size() > 0) {
                for (Aircrafts craft : tmp) {
                    if (craft.getId().intValue() != aircraft.getId().intValue()) {
                        JOptionPane.showMessageDialog(this, "Registration No existed.");
                        txtRegis.requestFocus();
                        return false;
                    }
                }
            }
            check = true;
        }

        return check;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAircraftType;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtOperator;
    private javax.swing.JTextField txtRegis;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the aircraft
     */
    public Aircrafts getAircraft() {
        return aircraft;
    }

    /**
     * @param aircraft the aircraft to set
     */
    public void setAircraft(Aircrafts aircraft) {
        this.aircraft = aircraft;
        bindData();
    }
}

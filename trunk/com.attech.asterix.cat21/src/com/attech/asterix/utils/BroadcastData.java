/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.attech.asterix.utils;

import com.attech.asterix.InternalMessage;
import com.attech.asterix.cat21.v21.Decryptor;
import exception.InvalidFormatException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author root
 */
public class BroadcastData extends javax.swing.JFrame {

    private final JFileChooser fc = new JFileChooser();
    List<InternalMessage> messages = new ArrayList<>();
    Decryptor decryptor = new Decryptor();
    
    /**
     * Creates new form CheckRawData
     */
    public BroadcastData() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFilePath = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnValidate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblPackages = new javax.swing.JLabel();
        lblLength = new javax.swing.JLabel();
        lblCat21 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblCat21MessageCount = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnContent = new javax.swing.JButton();
        txtPort = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnBroadCast = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtFilePath.setText("jTextField1");

        btnBrowse.setText("...");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnValidate.setText("Validate");
        btnValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidateActionPerformed(evt);
            }
        });

        jLabel2.setText("Validate asterix 21 raw data file");

        jLabel3.setText("RESULT : ");

        jLabel1.setText("Status");

        jLabel4.setText("Package");

        jLabel5.setText("Length");

        lblStatus.setText("...");

        lblPackages.setText("...");

        lblLength.setText("...");

        lblCat21.setText("...");

        jLabel6.setText("Cat21");

        lblCat21MessageCount.setText("...");

        jLabel7.setText("Msg");

        btnContent.setText("Content");
        btnContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContentActionPerformed(evt);
            }
        });

        jLabel8.setText("Port");

        btnBroadCast.setText("Broadcast");
        btnBroadCast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBroadCastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnValidate))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                                            .addComponent(lblPackages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblCat21MessageCount, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                            .addComponent(lblCat21, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBroadCast)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnContent)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse)
                    .addComponent(btnValidate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblStatus)
                            .addComponent(jLabel6)
                            .addComponent(lblCat21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lblPackages)
                            .addComponent(jLabel7)
                            .addComponent(lblCat21MessageCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lblLength)))
                    .addComponent(btnContent))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btnBroadCast))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.txtFilePath.setText(file.getPath());
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidateActionPerformed
        String file = this.txtFilePath.getText();
        if (file == null || file.isEmpty()) {
            this.lblStatus.setText("Not valid");
            return;
        }
        try {
            
            FileInputStream inputStream = new FileInputStream(file);
            
            byte[] byts = new byte[3];
            int numRead = 1; 
            int count = 0;
            int length = 0;
            int cat21 = 0;
            int messageCat21 = 0;
            
            do {
                numRead = inputStream.read(byts, 0, 3);
                if (numRead == 0) { break; }
                if (numRead != 3) {
                    this.lblStatus.setText("Not valid");
                    break;
                }

                int msgLength = (byts[1] & 0xFF) << 8 | (byts[2] & 0xFF);

                byte[] packages = new byte[msgLength];
                numRead = inputStream.read(packages, 3, msgLength - 3);
                packages[0] = byts[0];
                packages[1] = byts[1];
                packages[2] = byts[2];
                
                System.out.println("Read: "  + numRead + 3);
                
                if (numRead != msgLength - 3) {
                    this.lblStatus.setText("Not valid");
                    break;
                }

                List<InternalMessage> msg = (List<InternalMessage>) decryptor.extracInternalMesasge(packages, 2.1f);
                if (msg != null) {
                    cat21++;
                    messageCat21 += msg.size();
                }

                count++;
                this.lblPackages.setText(count + " (packages)");
                
                length += msgLength;
                this.lblLength.setText(length + " (bytes)");
                
                this.lblCat21.setText(cat21 + " (packages)");
                this.lblCat21MessageCount.setText(messageCat21 + " (messages)");
            } while (numRead > 0);
            
            this.lblStatus.setText("Good");
            
            
        } catch (IOException ex) {
            Logger.getLogger(BroadcastData.class.getName()).log(Level.SEVERE, null, ex);
            this.lblStatus.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btnValidateActionPerformed

    private void btnContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContentActionPerformed
        int returnVal = fc.showSaveDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION)  return;
        File file = fc.getSelectedFile();
        
        Map<Integer, List<InternalMessage>> list = new HashMap<>();
        List<InternalMessage> list2 = new ArrayList<>();
        try {
            
            FileInputStream inputStream = new FileInputStream(txtFilePath.getText());
            
            byte[] byts = new byte[3];
            int numRead = 1; 
            int cat21 = 0;
            int messageCat21 = 0;
            int packageCounting = 0;
            
            do {
                numRead = inputStream.read(byts, 0, 3);
                if (numRead == 0) { break; }
                if (numRead != 3) break;

                int msgLength = (byts[1] & 0xFF) << 8 | (byts[2] & 0xFF);

                byte[] packages = new byte[msgLength];
                numRead = inputStream.read(packages, 3, msgLength - 3);
                packages[0] = byts[0];
                packages[1] = byts[1];
                packages[2] = byts[2];
                
                System.out.println("Read: "  + numRead + 3);
                
                if (numRead != msgLength - 3) break;
                    List<InternalMessage> msg = (List<InternalMessage>) decryptor.extracInternalMesasge(packages, 2.1f);
                    if (msg == null) continue;
                    cat21++;
                    messageCat21 += msg.size();
                    packageCounting++;
                    
                    list.put(packageCounting, msg);
                    
                    for (InternalMessage message : msg) {
                        list2.add(message);
                        
                        /*
                        String address = Integer.toHexString(message.getTargetAddress()).toUpperCase();
                        List<InternalMessage> messageList = (List<InternalMessage>) list.get(address);
                        if (messageList == null) {
                            messageList = new ArrayList<>();
                            messageList.add(message);
                            list.put(address, messageList);
                        } else {
                            messageList.add(message);
                        }
                        */
                    }
                    
                
            } while (numRead > 0);
            
            FileWriter outFile = new FileWriter(file.getPath());
            PrintWriter out = new PrintWriter(outFile);
            out.println(cat21 + " (packages) " + messageCat21 + " (messages)");
            out.println("----------------------------------------------------");
            
            
            for (Integer key : list.keySet()) {
                List<InternalMessage> messageItems = (List<InternalMessage>) list.get(key);
                System.out.println("Package # " + key + " " + messageItems.size() + " (messages)");
                out.println("Package # " + key + " " + messageItems.size() + " (messages) ----------------------------------------");
                for (InternalMessage item : messageItems) {
                    out.println(item.toString());
                }
            }
            
            /*
            for (InternalMessage item : list2) {
                out.println(item.toString());
            }
            */
            out.flush();
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(BroadcastData.class.getName()).log(Level.SEVERE, null, ex);
            this.lblStatus.setText(ex.getMessage());
        }
        
        JOptionPane.showMessageDialog(this, "OK");
        
        
    }//GEN-LAST:event_btnContentActionPerformed

    private void btnBroadCastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBroadCastActionPerformed
        
        String file = this.txtFilePath.getText();
         try {
            
             int port = Integer.parseInt(txtPort.getText());
             DatagramSocket serverSocket = new DatagramSocket();
             InetAddress inetAddress = InetAddress.getByName("localhost");
             DatagramPacket dp;
            
             FileInputStream inputStream = new FileInputStream(file);

             byte[] byts = new byte[3];
             int numRead = 1;
             int count = 0;
             int length = 0;
             int cat21 = 0;
             int messageCat21 = 0;
            
             do {
                 numRead = inputStream.read(byts, 0, 3);
                 if (numRead == 0) {
                     break;
                 }
                 if (numRead != 3) {
                     this.lblStatus.setText("Not valid");
                     break;
                 }

                 int msgLength = (byts[1] & 0xFF) << 8 | (byts[2] & 0xFF);

                 byte[] packages = new byte[msgLength];
                 numRead = inputStream.read(packages, 3, msgLength - 3);
                 packages[0] = byts[0];
                 packages[1] = byts[1];
                 packages[2] = byts[2];

                 System.out.println("Read: " + numRead + 3);
                 if ((packages[0] & 0xFF) != 21) continue;

                 if (numRead != msgLength - 3) {
                     System.out.println("Not valid");
                     break;
                 }


                     List<InternalMessage> msg = (List<InternalMessage>) decryptor.extracInternalMesasge(packages, 2.1f);
                     if (msg != null) {
                         cat21++;
                         messageCat21 += msg.size();

                         dp = new DatagramPacket(packages, packages.length, inetAddress, port);
                         serverSocket.send(dp);
                         
                         count++;
                         System.out.println(count + " (packages)" + messageCat21 + " (messages)");
                     }


                 // length += msgLength;
                 // this.lblLength.setText(length + " (bytes)");
                 // this.lblCat21.setText(cat21 + " (packages)");
                 Thread.sleep(500);

             } while (numRead > 0);
             JOptionPane.showMessageDialog(this, "Sending completed");
        } catch (IOException | InterruptedException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnBroadCastActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BroadcastData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BroadcastData().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBroadCast;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnContent;
    private javax.swing.JButton btnValidate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblCat21;
    private javax.swing.JLabel lblCat21MessageCount;
    private javax.swing.JLabel lblLength;
    private javax.swing.JLabel lblPackages;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables
}

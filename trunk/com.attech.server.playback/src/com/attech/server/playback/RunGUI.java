/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.attech.server.playback;

import com.attech.adsb.record.RecordItem;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author root
 */
public class RunGUI extends javax.swing.JDialog {

    DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
    DateFormat formatter2 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private final int DAY_LENGTH = 86400000;
    private final int HOUR_LENGTH = 3600000;
    private PlayListLocal playList;
    private BlockingQueue<RecordItem> blockingQueue;
    private BroadCastUDPSocketThread socket;
  
     private PlayItem play ;
    /**
     * Creates new form RunGUI
     */
    public RunGUI(java.awt.Frame parent, boolean modal) throws SocketException, UnknownHostException {
        super(parent, modal);
        initComponents();
        
        initialize ();
        this.blockingQueue = new LinkedBlockingQueue<>();
        this.playList = new PlayListLocal(("C:\\Recorded"), blockingQueue);
        this.playList.addUpdateListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sld01.setValue(playList.getCurrentValue());
                
                Calendar calendar4 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
                calendar4.setTimeInMillis(playList.getCurrentTime());
                lblCurrent.setText(formatter2.format(calendar4.getTime()));
            }
        });
        socket = new BroadCastUDPSocketThread("localhost", 20552, blockingQueue);
        socket.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStop = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnResume = new javax.swing.JButton();
        sld01 = new javax.swing.JSlider();
        txtDate1 = new javax.swing.JTextField();
        txtHour1 = new javax.swing.JTextField();
        txtMinute1 = new javax.swing.JTextField();
        txtMinute2 = new javax.swing.JTextField();
        txtHour2 = new javax.swing.JTextField();
        txtDate2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        btnFileList = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        txtDate01 = new com.toedter.calendar.JDateChooser();
        txtHour01 = new com.toedter.components.JSpinField();
        txtMinute01 = new com.toedter.components.JSpinField();
        jLabel1 = new javax.swing.JLabel();
        txtDate02 = new com.toedter.calendar.JDateChooser();
        txtHour02 = new com.toedter.components.JSpinField();
        txtMinute02 = new com.toedter.components.JSpinField();
        jLabel2 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        lblStart = new javax.swing.JLabel();
        lblEnd = new javax.swing.JLabel();
        lblCurrent = new javax.swing.JLabel();
        btnStart2 = new javax.swing.JButton();
        btnStop2 = new javax.swing.JButton();
        btnPause2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnResume.setText("Resume");
        btnResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResumeActionPerformed(evt);
            }
        });

        txtDate1.setText("jTextField1");

        txtHour1.setText("jTextField2");

        txtMinute1.setText("jTextField2");

        txtMinute2.setText("jTextField2");

        txtHour2.setText("jTextField2");

        txtDate2.setText("jTextField1");

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        btnFileList.setText("File List");
        btnFileList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileListActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtDate01.setDateFormatString("dd/MM/yyyy");

        jLabel1.setText("Start");

        txtDate02.setDateFormatString("dd/MM/yyyy");

        jLabel2.setText("End");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblStart.setText("jLabel3");

        lblEnd.setText("jLabel3");

        lblCurrent.setText("jLabel3");

        btnStart2.setText("Start");
        btnStart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStart2ActionPerformed(evt);
            }
        });

        btnStop2.setText("Stop");
        btnStop2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStop2ActionPerformed(evt);
            }
        });

        btnPause2.setText("Pause");
        btnPause2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPause2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHour1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMinute1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHour2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMinute2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnStop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPause)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnResume)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFileList))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDate01, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtHour01, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMinute01, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDate02, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtHour02, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMinute02, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnStart2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnStop2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPause2)))
                        .addGap(0, 152, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStart)
                                .addGap(291, 291, 291)
                                .addComponent(lblCurrent)
                                .addGap(293, 293, 293)
                                .addComponent(lblEnd))
                            .addComponent(sld01, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 119, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtDate01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHour01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMinute01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2)
                            .addComponent(txtDate02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHour02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMinute02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHour2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMinute2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHour1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMinute1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jLabel1))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStop)
                            .addComponent(btnStart)
                            .addComponent(btnPause)
                            .addComponent(btnResume)
                            .addComponent(btnFileList)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStart2)
                            .addComponent(btnStop2)
                            .addComponent(btnPause2))))
                .addGap(29, 29, 29)
                .addComponent(sld01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStart)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblEnd)
                        .addComponent(lblCurrent)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        try {
            Calendar calendar4 = new GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.getDefault());
            calendar4.set(2013, 3, 1); 
            
            Calendar calendar5 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
            calendar5.set(2013, 3, 12); 
            
            // calendar3.set(2012, 04, 8, new Date().getHours(), new Date().getMinutes(), new Date().getSeconds());
            // System.out.println("time 2 " + Calendar.getInstance().set(2013, 4, 8).getTimeInMillis() + " " + System.currentTimeMillis());
            
            // Calendar calendar = Calendar.getInstance();
            // calendar.set(2012, 4, 1); 
            
            // Calendar calendar2 = Calendar.getInstance();
            // calendar2.set(2012, 4, 12);
            
            // System.out.println(" TIME : " + calendar.getTimeInMillis());
            // System.out.println(" TIME : " + System.currentTimeMillis());
            play = new PlayItem("C:\\Recorded", calendar4.getTimeInMillis(), calendar5.getTimeInMillis(), 1);
            play.start();
        } catch (SocketException | UnknownHostException ex) {
            Logger.getLogger(RunGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        play.stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        play.pause();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResumeActionPerformed
        play.resume();
    }//GEN-LAST:event_btnResumeActionPerformed

    private void btnFileListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileListActionPerformed
        txtLog.setText("");
        try {
            Date date1 = formatter.parse(txtDate1.getText() + " " + txtHour1.getText() + ":" + txtMinute1.getText());
            Date date2 = formatter.parse(txtDate2.getText() + " " + txtHour2.getText() + ":" + txtMinute2.getText());
            txtLog.append("Search from " + formatter.format(date1) + " to " + formatter.format(date2) + "\n");
            
            Calendar calendar1 = new GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.getDefault());
            calendar1.setTime(date1);
            
            Calendar calendar2 = new GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.getDefault());
            calendar2.setTime(date2);

            txtLog.append("-------------------------------------------------------------\n");
            txtLog.append("Time1 " + calendar1.getTimeInMillis() + "\n");
            txtLog.append("Time2 " + calendar2.getTimeInMillis() + "\n");
            txtLog.append("Current " + System.currentTimeMillis() + "\n");
            txtLog.append("-------------------------------------------------------------\n");
            
            long start = calendar1.getTimeInMillis();
            long end = calendar2.getTimeInMillis();
            for (long i = start; i < end; i += HOUR_LENGTH) {
                
                int folder = (int) (i / DAY_LENGTH);
                int fileName = (int) (i / HOUR_LENGTH);

                txtLog.append("folder: " + folder + " \\ " + Integer.toString(fileName) + ".rcd\n");
                File directory = new File("C:\\Recorded", Integer.toString(folder));
                if (!directory.exists()) continue;

                File file = new File(directory.getPath(), Integer.toString(fileName) + ".rcd");
                if (!file.exists()) continue;
                txtLog.append("> Found : " + file.getPath() +"\n");
            }
            
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnFileListActionPerformed

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        Calendar calendar1 = txtDate01.getCalendar();
        calendar1.set(Calendar.HOUR, txtHour01.getValue());
        calendar1.set(Calendar.MINUTE, txtMinute01.getValue());
        
        Calendar calendar2 = txtDate02.getCalendar();
        calendar2.set(Calendar.HOUR, txtHour02.getValue());
        calendar2.set(Calendar.MINUTE, txtMinute02.getValue());
        
        JOptionPane.showMessageDialog(rootPane, "" + calendar1.getTime() + " " + calendar2.getTime());
        
        
        playList.build(calendar1.getTimeInMillis(), calendar2.getTimeInMillis());
        // this.sld01.setMinimum((int) playList.getFoundStart());
        int max = (int) (playList.getFoundEnd() - playList.getFoundStart());
        this.sld01.setMaximum(max);
        this.sld01.setValue(0);
        
        Calendar calendar3 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
        calendar3.setTimeInMillis(playList.getFoundStart());
        lblStart.setText(formatter2.format(calendar3.getTime()));
        
        calendar3.setTimeInMillis(playList.getFoundEnd());
        lblEnd.setText(formatter2.format(calendar3.getTime()));
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnStart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStart2ActionPerformed
        this.playList.start();
    }//GEN-LAST:event_btnStart2ActionPerformed

    private void btnStop2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStop2ActionPerformed
        this.playList.stop();
    }//GEN-LAST:event_btnStop2ActionPerformed

    private void btnPause2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPause2ActionPerformed
        this.playList.pause();
    }//GEN-LAST:event_btnPause2ActionPerformed

     private List<File> buildFileList(long start, long end, String root) {
        List<File> files = new ArrayList<>();
        // int startFile = (int) (start / HOUR_LENGTH);
        // int endFile = (int) (end / HOUR_LENGTH);
        // File directory = new File(this.root);
        System.out.println("start: " + start + " end " + end + "current " + System.currentTimeMillis());
        for (long i = start; i < end; i += HOUR_LENGTH) {
            
            int folder = (int) (i / DAY_LENGTH);
            int fileName = (int) (i / HOUR_LENGTH);
            System.out.println("folder: " + folder + " + " + fileName);
            File directory = new File(root, Integer.toString(folder));
            if (!directory.exists()) continue;
            
            File file = new File(directory.getPath(), Integer.toString(fileName) + ".rcd");
            if (!file.exists()) continue;

            files.add(file);
            System.out.println("Add file : " + file.getPath());
        }
        return files;
    }
    
     private void initialize () {
         Calendar calendar1 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
         calendar1.set(Calendar.HOUR, 0);
         calendar1.set(Calendar.MINUTE, 0);
         calendar1.set(Calendar.SECOND, 0);
         calendar1.set(Calendar.MILLISECOND, 0);

         txtDate01.setCalendar(calendar1);
         txtHour01.setValue(calendar1.get(Calendar.HOUR));
         txtMinute01.setValue(calendar1.get(Calendar.MINUTE));
         
         Calendar calendar2 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
         calendar2.set(Calendar.HOUR, 23);
         calendar2.set(Calendar.MINUTE, 59);
         calendar2.set(Calendar.SECOND, 59);
         calendar2.set(Calendar.MILLISECOND, 999);

         txtDate02.setCalendar(calendar2);
         txtHour02.setValue(calendar2.get(Calendar.HOUR));
         txtMinute02.setValue(calendar2.get(Calendar.MINUTE));
         
     }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RunGUI dialog;
                try {
                    dialog = new RunGUI(new javax.swing.JFrame(), true);

                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SocketException | UnknownHostException ex) {
                    Logger.getLogger(RunGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFileList;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPause2;
    private javax.swing.JButton btnResume;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStart2;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnStop2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrent;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblStart;
    private javax.swing.JSlider sld01;
    private com.toedter.calendar.JDateChooser txtDate01;
    private com.toedter.calendar.JDateChooser txtDate02;
    private javax.swing.JTextField txtDate1;
    private javax.swing.JTextField txtDate2;
    private com.toedter.components.JSpinField txtHour01;
    private com.toedter.components.JSpinField txtHour02;
    private javax.swing.JTextField txtHour1;
    private javax.swing.JTextField txtHour2;
    private javax.swing.JTextArea txtLog;
    private com.toedter.components.JSpinField txtMinute01;
    private com.toedter.components.JSpinField txtMinute02;
    private javax.swing.JTextField txtMinute1;
    private javax.swing.JTextField txtMinute2;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.attech.server.playback;

import com.attech.adsb.record.RecordItem;
import com.attech.server.playback.handle.CommandListener;
import com.attech.server.playback.handle.ControlCommandEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class ClientReplayGUI extends javax.swing.JFrame {

    private final DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
    private final DateFormat formatter2 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private final int DAY_LENGTH = 86400000;
    private final int HOUR_LENGTH = 3600000;
    private IPlayList playList;
    private BlockingQueue<RecordItem> blockingQueue;
    private BroadCastUDPSocketThread socket;
    private PlayItem play;
     private List _listeners = new ArrayList();

    public ClientReplayGUI() throws SocketException, UnknownHostException {
        initComponents();

        Configuration.getInstance().load();
        initialize();

        this.blockingQueue = new LinkedBlockingQueue<>();
        if (Configuration.getInstance().isIsLocal()) {
            this.playList = new PlayListLocal(Configuration.getInstance().getLocation(), blockingQueue);
        } else {
            this.playList = new PlayListSamba(Configuration.getInstance().getLocation(), blockingQueue);
        }

        this.playList.addUpdateListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sld01.setValue(playList.getCurrentValue());
                Calendar calendar4 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
                calendar4.setTimeInMillis(playList.getCurrentTime());
                lblCurrent.setText(formatter2.format(calendar4.getTime()));
            }
        });
        socket = new BroadCastUDPSocketThread(Configuration.getInstance().getAddress(), Configuration.getInstance().getPort(), blockingQueue);
        socket.start();

        btnPause2.setEnabled(false);
        btnStart2.setEnabled(false);
        btnStop2.setEnabled(false);
        sld01.setEnabled(false);
    }
    
    public long getTime() {
        return playList.getCurrentTime();
    }
    
    public void addTimeUpdateListener(ActionListener l) {
        this.playList.addUpdateListener((l));
    }
    
     public void addCommandPerformListener(CommandListener l) {
        _listeners.add(l);
    }

    private synchronized void _fireMoodEvent(int command) {
        ControlCommandEvent evtArg = new ControlCommandEvent(this, command);
        Iterator listeners = _listeners.iterator();
        while (listeners.hasNext()) {
            ((CommandListener) listeners.next()).CommandActionPerform(evtArg);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sld01 = new javax.swing.JSlider();
        lblCurrent = new javax.swing.JLabel();
        btnStart2 = new javax.swing.JButton();
        btnStop2 = new javax.swing.JButton();
        btnPause2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtDate02 = new com.toedter.calendar.JDateChooser();
        btnSearch = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtHour02 = new com.toedter.components.JSpinField();
        txtMinute02 = new com.toedter.components.JSpinField();
        txtMinute01 = new com.toedter.components.JSpinField();
        txtHour01 = new com.toedter.components.JSpinField();
        txtDate01 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        lblStart = new javax.swing.JLabel();
        lblEnd = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        sld01.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblCurrent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCurrent.setText("00/00/0000 00:00:00");
        lblCurrent.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblCurrent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblCurrent.setPreferredSize(new java.awt.Dimension(100, 25));

        btnStart2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/attech/server/playback/images/play.gif"))); // NOI18N
        btnStart2.setText("Start");
        btnStart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStart2ActionPerformed(evt);
            }
        });

        btnStop2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/attech/server/playback/images/stop.gif"))); // NOI18N
        btnStop2.setText("Stop");
        btnStop2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStop2ActionPerformed(evt);
            }
        });

        btnPause2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/attech/server/playback/images/pause.gif"))); // NOI18N
        btnPause2.setText("Pause");
        btnPause2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPause2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtDate02.setDateFormatString("dd/MM/yyyy");

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/attech/server/playback/images/search.gif"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel2.setText("End");

        txtHour02.setMaximum(23);
        txtHour02.setMinimum(0);

        txtMinute02.setMaximum(59);
        txtMinute02.setMinimum(0);

        txtMinute01.setMaximum(59);
        txtMinute01.setMinimum(0);

        txtHour01.setMaximum(23);
        txtHour01.setMinimum(0);

        txtDate01.setDateFormatString("dd/MM/yyyy");

        jLabel1.setText("Start");

        lblStart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStart.setText("00/00/0000 00:00:00");
        lblStart.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblStart.setPreferredSize(new java.awt.Dimension(100, 25));

        lblEnd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEnd.setText("00/00/0000 00:00:00");
        lblEnd.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblEnd.setPreferredSize(new java.awt.Dimension(100, 25));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDate01, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHour01, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMinute01, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(txtDate02, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(txtHour02, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMinute02, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(lblStart, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(txtDate01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtHour01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMinute01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(txtDate02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtHour02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMinute02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStop2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPause2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStart2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sld01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(sld01, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStart2)
                    .addComponent(btnPause2)
                    .addComponent(btnStop2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        Calendar calendar1 = txtDate01.getCalendar();
        calendar1.set(Calendar.HOUR, txtHour01.getValue());
        calendar1.set(Calendar.MINUTE, txtMinute01.getValue());
        
        Calendar calendar2 = txtDate02.getCalendar();
        calendar2.set(Calendar.HOUR, txtHour02.getValue());
        calendar2.set(Calendar.MINUTE, txtMinute02.getValue());
        
        // JOptionPane.showMessageDialog(rootPane, "" + calendar1.getTime() + " " + calendar2.getTime());
        
        try {
            this.setEnabled(false);
            playList.build(calendar1.getTimeInMillis(), calendar2.getTimeInMillis());
        } finally {
            this.setEnabled(true);
        }
        
        
        // this.sld01.setMinimum((int) playList.getFoundStart());
        if (playList.getFoundStart() == 0 || playList.getFoundEnd() == 0) {
            lblStart.setText("00/00/0000 00:00:00");
            lblEnd.setText("00/00/0000 00:00:00");
            btnPause2.setEnabled(false);
            btnStart2.setEnabled(false);
            btnStop2.setEnabled(false);
            sld01.setEnabled(false);
        } else {
            int max = (int) (playList.getFoundEnd() - playList.getFoundStart());
            this.sld01.setMaximum(max);
            this.sld01.setValue(0);

            Calendar calendar3 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
            calendar3.setTimeInMillis(playList.getFoundStart());
            lblStart.setText(formatter2.format(calendar3.getTime()));

            calendar3.setTimeInMillis(playList.getFoundEnd());
            lblEnd.setText(formatter2.format(calendar3.getTime()));
            
            btnStop2.setEnabled(false);
            btnStart2.setEnabled(true);
            btnPause2.setEnabled(false);
            sld01.setEnabled(true);
        }
        
        
        
        this._fireMoodEvent(1); // Search
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnStart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStart2ActionPerformed
        this._fireMoodEvent(2); // Start
        this.playList.start();
        btnStop2.setEnabled(true);
        btnStart2.setEnabled(false);
        btnPause2.setEnabled(true);
    }//GEN-LAST:event_btnStart2ActionPerformed

    private void btnStop2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStop2ActionPerformed
        this._fireMoodEvent(3); // Stop
        this.playList.stop();
        btnStop2.setEnabled(false);
        btnStart2.setEnabled(true);
        btnPause2.setEnabled(false);
    }//GEN-LAST:event_btnStop2ActionPerformed

    private void btnPause2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPause2ActionPerformed
        this._fireMoodEvent(4); // Pause
        this.playList.pause();
        btnStop2.setEnabled(true);
        btnStart2.setEnabled(true);
        btnPause2.setEnabled(false);
    }//GEN-LAST:event_btnPause2ActionPerformed

    private List<File> buildFileList(long start, long end, String root) {
        List<File> files = new ArrayList<>();
        // int startFile = (int) (start / HOUR_LENGTH);
        // int endFile = (int) (end / HOUR_LENGTH);
        // File directory = new File(this.root);
        System.out.println("start: " + start + " end " + end + "current " + System.currentTimeMillis());
        for (long i = start; i < end; i += HOUR_LENGTH) {

            int folder = (int) (i / DAY_LENGTH);
            int fileName = (int) (i / HOUR_LENGTH);
            System.out.println("folder: " + folder + " + " + fileName);
            File directory = new File(root, Integer.toString(folder));
            if (!directory.exists()) {
                continue;
            }

            File file = new File(directory.getPath(), Integer.toString(fileName) + ".rcd");
            if (!file.exists()) {
                continue;
            }

            files.add(file);
            System.out.println("Add file : " + file.getPath());
        }
        return files;
    }

    private void initialize() {
        Calendar calendar1 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
        calendar1.set(Calendar.HOUR, 0);
        calendar1.set(Calendar.MINUTE, 0);
        calendar1.set(Calendar.SECOND, 0);
        calendar1.set(Calendar.MILLISECOND, 0);

        txtDate01.setCalendar(calendar1);
        txtHour01.setValue(calendar1.get(Calendar.HOUR));
        txtMinute01.setValue(calendar1.get(Calendar.MINUTE));

        Calendar calendar2 = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
        calendar2.set(Calendar.HOUR, 23);
        calendar2.set(Calendar.MINUTE, 59);
        calendar2.set(Calendar.SECOND, 59);

        txtDate02.setCalendar(calendar2);
        txtHour02.setValue(calendar2.get(Calendar.HOUR));
        txtMinute02.setValue(calendar2.get(Calendar.MINUTE));

    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClientReplayGUI dialog;
                try {
                    dialog = new ClientReplayGUI();

                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SocketException | UnknownHostException ex) {
                    Logger.getLogger(ClientReplayGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPause2;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnStart2;
    private javax.swing.JButton btnStop2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCurrent;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblStart;
    private javax.swing.JSlider sld01;
    private com.toedter.calendar.JDateChooser txtDate01;
    private com.toedter.calendar.JDateChooser txtDate02;
    private com.toedter.components.JSpinField txtHour01;
    private com.toedter.components.JSpinField txtHour02;
    private com.toedter.components.JSpinField txtMinute01;
    private com.toedter.components.JSpinField txtMinute02;
    // End of variables declaration//GEN-END:variables
}
